#!/bin/bash
#include "main.h"
#include <unistd.h>

/**
 * _putchar - wirtes the character c to stdout
 * @c: the character to print
 * Return: 0 (Success)
*/

int _putchar(char c)
{
	return (write(1, &c, 1));
}

/**
 * _islower - function to check for the lowercase characters
 * @c: parameter to be checked
 * Return: 0 (Success)
*/

int _islower(int c)
{
	if (c >= 'a' && c <= 'z')
		return (1);
	else
		return (0);
}

/**
  * _isalpha - Checks for alphabetic character
  * @c: The character to be checked
  *
  * Return: 1 for alphabetic character or 0 for anything else
  */
int _isalpha(int c)
{
	if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'))
		return (1);
	else
		return (0);
}

/**
 * _abs - function to check for the absolute value
 * @i: parameter to be checked
 * Return: -i for the not absolute value and i for the absolute value
*/

int _abs(int i)
{
	if (i < 0)
	{
		return (-i);
	}
	else if (i >= 0)
	{
		return (i);
	}
	return (0);
}

/**
 * _isupper - function that checks for uppercase character
 * @c: function parameter
 * Return: 1 if c is uppercase and 0 otherwise
*/

int _isupper(int c)
{
	if (c >= 'A' && c <= 'Z')
		return (1);
	else
		return (0);
}

/**
 * _isdigit - function that checks for a digit (0 through 9)
 * @c: parameter function
 * Return: 0 if c is digit and 0 otherwise
*/

int _isdigit(int c)
{
	if (c >= 48 && c <= 57)
		return (1);
	else
		return (0);
}

/**
 * _strlen - function that returns the length of a string
 * @s: parameter function
 * Return: length of the string
*/

int _strlen(char *s)
{
	int i;
	int count = 0;

	for (i = 0; s[i] != '\0'; i++)
	{
		count++;
	}
	return (count);
}

/**
 * _puts - function that prints a string, followed by a new line, to stdout
 * @str: parameter function
 * Return: void
*/

void _puts(char *str)
{
	int i;

	for (i = 0; str[i] != '\0'; i++)
	{
		_putchar(str[i]);
	}
	_putchar('\n');
}

/**
 * _strcpy - function that copies the string pointed to by src
 * @dest: parameter function
 * @src: parameter function
 * Return: the pointer to dest
*/

char *_strcpy(char *dest, char *src)
{
	int i;

	for (i = 0; src[i] != '\0'; i++)
	{
		dest[i] = src[i];
	}
	dest[i] = '\0';
	return (dest);
}

/**
 * _atoi - Convert a string to an integer.
 * @s: The pointer to convert
 *
 * Return: A integer
 */
int _atoi(char *s)
{
	int c = 0;
	unsigned int ni = 0;
	int min = 1;
	int isi = 0;

	while (s[c])
	{
		if (s[c] == 45)
		{
			min *= -1;
		}

		while (s[c] >= 48 && s[c] <= 57)
		{
			isi = 1;
			ni = (ni * 10) + (s[c] - '0');
			c++;
		}

		if (isi == 1)
		{
			break;
		}

		c++;
	}

	ni *= min;
	return (ni);
}

/**
 * _strcat - function that concatenates two strings
 * @dest: parameter function
 * @src: parameter function
 * Return: pointer to the resulting string dest
*/

char *_strcat(char *dest, char *src)
{
	int destlen = 0;
	int srclen = 0;
	int i;

	for (i = 0; dest[i] != '\0'; i++)
	{
		destlen++;
	}
	for (i = 0; src[i] != '\0'; i++)
	{
		srclen++;
	}
	for (i = 0; i <= srclen; i++)
	{
		dest[destlen + i] = src[i];
	}
	return (dest);
}

/**
 * _strncat - function that concatenates two strings
 * @dest: parameter function
 * @src: parameter function
 * @n: parameter function
 * Return: pointer to the resulting string dest
*/

char *_strncat(char *dest, char *src, int n)
{
	int destlen = 0;
	int i = 0;

	while (dest[i++])
	{
		destlen++;
	}
	for (i = 0; src[i] && i < n; i++)
	{
		dest[destlen++] = src[i];
	}
	return (dest);
}

/**
 * _strncpy - function that copies a strings
 * @dest: parameter function
 * @src: parameter function
 * @n: parameter function
 * Return: pointer to the resulting string dest
*/

char *_strncpy(char *dest, char *src, int n)
{
	int i;

	for (i = 0; i < n && src[i] != '\0'; i++)
	{
		dest[i] = src[i];
	}
	while (i < n)
	{
		dest[i] = '\0';
		i++;
	}
	return (dest);
}

/**
 * _strcmp - function that compares two strings
 * @s1: parameter function
 * @s2: parameter function
 * Return: 0 (Success)
*/

int _strcmp(char *s1, char *s2)
{
	int i;

	for (i = 0; s1[i] != '\0' || s2[i] != '\0'; i++)
	{
		if (s1[i] != s2[i])
		{
			if (s1[i] < s2[i])
			{
				return (s1[i] - s2[i]);
			}
			else if (s2[i] < s1[i])
			{
				return (s1[i] - s2[i]);
			}
		}
	}
	return (0);
}

/**
 * _memset - function that fills memory with a constant byte
 * @s: parameter function
 * @b: parameter function
 * @n: parameter function
 * Return: pointer to the memory area s
 */

char *_memset(char *s, char b, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
	{
		s[i] = b;
	}
	return (s);
}

/**
 * _memcpy - function that copies memory area
 * @dest: parameter function
 * @src: parameter function
 * @n: parameter function
 * Return: pointer to dest
 */

char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
	{
		dest[i] = src[i];
	}
	return (dest);
}

/**
 * _strchr - function that locates a character in a string
 * @s: parameter function
 * @c: parameter function
 * Return: s or NULL
 */

char *_strchr(char *s, char c)
{
	while (*s != '\0')
	{
		if (*s == c)
			return (s);
		s++;
	}
	if (*s == c)
		return (s);
	return (NULL);
}

/**
 * _strspn - function that gets  the length of a prefix substring
 * @s: parameter function
 * @accept: parameter function
 * Return: the number of bytes
 */

unsigned int _strspn(char *s, char *accept)
{
	int i, j;

	for (i = 0; s[i] != '\0'; i++)
	{
		for (j = 0; s[i] != accept[j]; j++)
		{
			if (accept[j] == '\0')
				return (i);
		}
	}
	return (0);
}

/**
 * _strpbrk - function that searches a string for any of a set of bytes
 * @s: parameter function
 * @accept: parameter function
 * Return: a pointer to the byte in s
 */

char *_strpbrk(char *s, char *accept)
{
	int i = 0;
	int j;

	while (s[i])
	{
		j = 0;
		while (accept[j])
		{
			if (s[i] == accept[j])
			{
				s += i;
				return (s);
			}
			j++;
		}
		i++;
	}
	return ('\0');
}

/**
 * _strstr - function that locates a substring
 * @haystack: parameter function
 * @needle: parameter function
 * Return: pointer to the beginning of the located substring or NULL
 */

char *_strstr(char *haystack, char *needle)
{
	int i = 0;
	int j = 0;

	while (haystack[i])
	{
		while (needle[j])
		{
			if (haystack[i + j] != needle[j])
			{
				break;
			}
			j++;
		}
		if (needle[j] == '\0')
		{
			return (haystack + i);
		}
		i++;
	}
	return (0);
}

